%% Initialization code
function varargout = WindTurbineDesign(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @WindTurbineDesign_OpeningFcn, ...
                   'gui_OutputFcn',  @WindTurbineDesign_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

%% Opening function
function WindTurbineDesign_OpeningFcn(hObject, eventdata, handles, varargin)

% Add subfunctions path
addpath('subfunctions')

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end
set(handles.OpenProject, 'Enable', 'on');
set(handles.Info, 'Enable', 'on');

% Color scheme
handles.Color.EdgeColor = 'none';
handles.Color.White = [255, 255, 255]/255;
handles.Color.Lightergrey = [200, 200, 200]/255;
handles.Color.Lightgrey = [174, 174, 174]/255;
handles.Color.Grey = [120, 120, 120]/255;
handles.Color.Red = [189, 112, 82]/255;
handles.Color.Brown = [146, 95, 54]/255;
handles.Color.Green = [194, 184, 101]/255;
handles.Color.Yellow = [249, 178, 51]/255;
handles.Color.Blue = [0 165, 213]/255;
handles.Color.Orange = [245, 162, 77]/255;
handles.Color.Rock = 0.5*(handles.Color.Grey + handles.Color.Brown);
handles.Color.Sand = [223, 208, 165]/255;
handles.Color.Sea = [77, 142, 150]/255;
handles.ColorArray = [...
    handles.Color.White; ...
    handles.Color.Lightergrey; ...
    handles.Color.Lightgrey; ...
    handles.Color.Grey; ...
    handles.Color.Red; ...
    handles.Color.Green; ...
    handles.Color.Yellow; ...
    handles.Color.Blue; ...
    handles.Color.Orange; ...
    handles.Color.Brown; ...
    handles.Color.Rock; ...
    handles.Color.Sand; ...
    handles.Color.Sea];

% Lighting properties (AmbientStrengh/DiffuseStrength/SpecularStrength)
handles.Lighting.Steel = [0.8, 0.5, 0.9];
handles.Lighting.Glassfiber = [0.7, 0.7, 0.2];
handles.Lighting.Nature = [0.9, 0.2, 0.0];

% Turbine plot settings
handles.Animation.RotationSpeed = 10;
set(handles.RotationSpeed_textbox, 'String', num2str(handles.Animation.RotationSpeed));
axes(handles.TurbinePlot)
axis equal
axis off
rotate3d on
view(-45,180/pi*atan(sin(pi/4)))

% Random number seed
handles.Seed = randi(1e6);

% Update handles structure
guidata(hObject, handles);
function WindTurbineDesign_CreateFcn(hObject, eventdata, handles)

%% Closing function
function WindTurbineDesign_CloseRequestFcn(hObject, eventdata, handles)

button = questdlg('Save changes?');
if strcmp(button, 'Yes')
    handles.Save = true;
    SaveProject_Callback(hObject, eventdata, handles);
    EndGUI(handles)
elseif strcmp(button, 'No')
    handles.Save = false;
    EndGUI(handles)
end

%% End GUI function
function EndGUI(handles)
if ~get(handles.Animate,'Value')
	close all force
else
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Closing...')
end

%% Output function
function varargout = WindTurbineDesign_OutputFcn(hObject, eventdata, handles) 

%% Info button
function Info_Callback(hObject, eventdata, handles)
info = [...
    'FASTTool v1.3 (July 2019) \n', ...
    'For the course AE4W09\n', ...
    '\n', ...
    'Works on Windows with Matlab R2018b (v9.1) and above \n', ...
    'Designed for FAST v8.16', ...
    '\n', ...
    'Course instructor: Michiel Zaaijer (M.B.Zaayer@tudelft.nl) \n', ...
    'GUI created by: Rene Bos and Michiel Zaaijer \n', ...
    'Simulink integration: Sebastiaan Mulders (S.P.Mulders@tudelft.nl) and Jan-Willem van Wingerden (J.W.vanWingerden@tudelft.nl)'];
helpdlg(sprintf(info), 'Info')

%% Open turbine
function OpenProject_Callback(hObject, eventdata, handles)
if ~strcmpi(handles.WindTurbineDesign.Name,'FASTTool')
    button = questdlg('Save changes?');
    if strcmp(button, 'Yes')
        SaveProject_Callback(hObject, eventdata, handles);
    elseif strcmp(button, 'Cancel')
        return
    end
end

% Dialogue box
[FileName,PathName] = uigetfile('*.mat', 'Open turbine');
if FileName

    % Set window title
    Title = ['FASTTool - ', FileName];
    set(handles.WindTurbineDesign, 'Name', Title)
    
    % Load project
    load([PathName,FileName]);

    % Stop animation
    animating = false;
    if get(handles.Animate, 'Value')
        set(handles.Animate, 'Value', 0);
        animating = true;
    end

    % Clear current plot
    cla(handles.TurbinePlot)

    % Store turbine geometry in handles
    handles.Blade = Blade;
    handles.Airfoil = Airfoil;
    handles.Tower = Tower;
    handles.Nacelle = Nacelle;
    handles.Drivetrain = Drivetrain;
    handles.Control = Control;
    handles.CertificationSettings = CertificationSettings;
    
    % Store air density in handles
    handles.AirDensity = AirDensity;

    % Set turbine appearance
    set(handles.Landscape, 'Value', Appearance(1));
    set(handles.BladeStyle, 'Value', Appearance(2));
    set(handles.BladeColor, 'Value', Appearance(3));
    set(handles.TowerStyle, 'Value', Appearance(4));
    set(handles.TowerColor, 'Value', Appearance(5));
    handles.BladePaint = handles.ColorArray(Appearance(3),:);
    handles.TowerPaint = handles.ColorArray(Appearance(5),:);
    
    % Set air density textbox
    set(handles.AirDensity_textbox, 'String', handles.AirDensity);
    
    % Enable window
    buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
    for i = 1:length(buttons)
        set(buttons(i), 'Enable', 'on');
    end
    
    % Update handles structure
    guidata(hObject, handles);
    
    % Plot turbine
    PlotTurbine(handles,false)

    % Resume animation
    if animating
        set(handles.Animate, 'Value', 1)
    end
    
end

%% Save turbine
function SaveProject_Callback(hObject, eventdata, handles)

% Dialogue box
[FileName,PathName] = uiputfile('*.mat', 'Save turbine');
if FileName
    
    % Set window title
    Title = ['FASTTool - ', FileName];
    set(handles.WindTurbineDesign, 'Name', Title)
    
    % Get turbine and environmental properties from handles
    Blade = handles.Blade;
    Airfoil = handles.Airfoil;
    Tower = handles.Tower;
    Nacelle = handles.Nacelle;
    Drivetrain = handles.Drivetrain;
    Control = handles.Control;
    CertificationSettings = handles.CertificationSettings;
    AirDensity = handles.AirDensity;
    
    % Get turbine appearance
    Appearance = [...
        get(handles.Landscape, 'Value');
        get(handles.BladeStyle, 'Value');
        get(handles.BladeColor, 'Value');
        get(handles.TowerStyle, 'Value');
        get(handles.TowerColor, 'Value')];
    
    % Save project
    save([PathName,FileName], ...
        'Blade', ...
        'Airfoil', ...
        'Tower', ...
        'Nacelle', ...
        'Drivetrain', ...
        'Control', ...
        'Appearance', ...
        'CertificationSettings',...
        'AirDensity');

end

%% Summary info
function SummaryInfo_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Display summary info
SummaryInfo(...
    handles.Blade, ...
    handles.Airfoil, ...
    handles.Tower, ...
    handles.Nacelle, ...
    handles.Drivetrain, ...
    handles.Control,...
    handles.AirDensity);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

%% Turbine plot
function PlotTurbine(handles,undock)

% Get geometry from handles
Tower = handles.Tower;
Nacelle = handles.Nacelle;
Blade = handles.Blade;
Airfoil = handles.Airfoil;
Control = handles.Control;

% Set axis
if undock
    Plot = figure();
    set(Plot, 'Name', 'Turbine plot')
    view(-45,180/pi*atan(sin(pi/4)))
    axis equal
    axis off
else
    axes(handles.TurbinePlot)
end
light
lightangle(0, 45)
hold on

% Random number seed
rng(handles.Seed);

% Plot wind streaks
t = -2:0.5:2;
N = 10;
for i = 1:N;
    y = (rand(1)-0.5)*2*Blade.Radius(end);
    z = (Tower.HubHeight + Blade.Radius(end))*rand(1);
    U = 10*(z/Tower.HubHeight)^0.25;
    plot3(U*t + 60*(rand(1)-0.5), 0*t+y, 0*t+z, 'w', 'LineWidth', 0.25, 'Visible', 'off')
end

% Plot landscape
if get(handles.Landscape,'Value') == 1 % Grassland
    
    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Patch of grass
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-2 -2 -2 -2 0 0 0 0]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-5 -5 -5 -5 -2 -2 -2 -2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([-5 Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 2 % Rough pasture
    
    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Patch of grass
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 5 * cos(x * pi/L) .* cos(y * pi/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower.Diameter(1));
    if ~isempty(base)
        z = z * 5/min(base(:));
    end
    z = z - 5;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z(1,:))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z(:,1))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z(end,:))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z(:,end))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Scattered bushes
    if undock
        N = 24;
    else
        N = 6;
    end
    width = 2;
    height = 2;
    clearance = 5;
    X = x;
    Y = y;
    Z = z;
    for i = 2:size(X,1)-1
        for j = 2:size(Y,2)-1

            draw = randi(2);
            if draw == 1;
                if (sqrt(X(i,j)^2 + Y(i,j)^2) > Tower.Diameter/2 + clearance)

                    [x,y,z] = sphere(8);
                    x = X(i,j) + width*x + (rand(1)-0.5)*10 + 0.25*randn(size(x));
                    y = Y(i,j) + width*y + (rand(1)-0.5)*10 + 0.25*randn(size(y));
                    z = Z(i,j) + height*z + 0.15*height + 0.25*randn(size(z));
                    TreeColor = handles.Color.Green + 10/255*randn([1,3]);
                    TreeColor(TreeColor < 0) = 0;
                    TreeColor(TreeColor > 1) = 1;
                    surf(x,y,z, ...
                        'FaceColor', TreeColor, ...
                        'EdgeColor', handles.Color.EdgeColor, ...
                        'AmbientStrength', handles.Lighting.Nature(1), ...
                        'DiffuseStrength', handles.Lighting.Nature(2), ...
                        'SpecularStrength', handles.Lighting.Nature(3), ...
                        'BackFaceLighting', 'reverselit')

                end
            end
        end
    end
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 3 % Forest
   
    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Patch of grass
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-2 -2 -2 -2 0 0 0 0]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Green*0.9, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-5 -5 -5 -5 -2 -2 -2 -2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Trees
    if undock
        N = 24;
    else
        N = 6;
    end
    width = 5;
    height = 30;
    clearance = 7.5;
    [X,Y] = ndgrid(...
        -(L/2-width/2):clearance:(L/2-width/2), ...
        -(L/2-width/2):clearance:(L/2-width/2));
    for i = 1:size(X,1)
        for j = 1:size(Y,2)
            
            if sqrt(X(i,j)^2 + Y(i,j)^2) > Tower.Diameter/2 + clearance
                [x,y,z] = cylinder(0.5,4);
                dX = (rand(1) - 0.5) * width*3/4;
                dY = (rand(1) - 0.5) * width*3/4;
                x = x + X(i,j) + dX;
                y = y + Y(i,j) + dY;
                z = 4*z;
                surf(x,y,z, ...
                    'FaceColor', handles.Color.Brown, ...
                    'EdgeColor', handles.Color.EdgeColor, ...
                    'AmbientStrength', handles.Lighting.Nature(1), ...
                    'DiffuseStrength', handles.Lighting.Nature(2), ...
                    'SpecularStrength', handles.Lighting.Nature(3), ...
                    'BackFaceLighting', 'reverselit')
                
                [x,y,z] = cylinder([0.6,0.9,0.8,1.0,0.8,0.9,0.7,0.8,0.5,0.6,0.3,0.4,0] * (width+randn(1))*3/4,N);
                x = x + X(i,j) + dX;
                y = y + Y(i,j) + dY;
                z = 4 + (height + 2*randn(1) - 4) * z;
                TreeColor = handles.Color.Green + 10/255*randn([1,3]);
                TreeColor(TreeColor < 0) = 0;
                TreeColor(TreeColor > 1) = 1;
                surf(x,y,z, ...
                    'FaceColor', TreeColor, ...
                    'EdgeColor', handles.Color.EdgeColor, ...
                    'AmbientStrength', handles.Lighting.Nature(1), ...
                    'DiffuseStrength', handles.Lighting.Nature(2), ...
                    'SpecularStrength', handles.Lighting.Nature(3), ...
                    'BackFaceLighting', 'reverselit')
                
            end
            
        end
    end
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
        
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([-5 Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 4 % Hill
    
    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Patch of grass
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 15 * cos(x * pi/L) .* cos(y * pi/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + 2*randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower.Diameter(1));
    if ~isempty(base)
        z = z * 15/min(base(:));
    end
    z = z - 15;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z(1,:))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z(:,1))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z(end,:))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z(:,end))], ...
        'g', 'FaceColor', handles.Color.Green, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Tower.HubHeight + Blade.Radius(end) + 1])
    end

elseif get(handles.Landscape,'Value') == 5 % Mountain

    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Surface
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 30 * cos(x * pi/L) .* cos(y * pi/2/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + 5*randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower.Diameter(1));
    if ~isempty(base)
        z = z * 30/min(base(:));
    end
    z = z - 30;
    surf(x,y,z, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    colormap([...
        interp1(0:0.5:1, [handles.Color.Rock(1); handles.Color.Rock(1); handles.Color.White(1)], linspace(0,1,32))', ...
        interp1(0:0.5:1, [handles.Color.Rock(2); handles.Color.Rock(2); handles.Color.White(2)], linspace(0,1,32))', ...
        interp1(0:0.5:1, [handles.Color.Rock(3); handles.Color.Rock(3); handles.Color.White(3)], linspace(0,1,32))'])
    caxis([-15 0])
    
    % Rock
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Color.Rock, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:), flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Color.Rock, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1); flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Color.Rock, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:), flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Color.Rock, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end); flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Color.Rock, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 6 % Coastal

    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Sea surface
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [-5 -5 -5 -5 0 0 0 0] - 0.5];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Sea, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Land surface
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 5 * cos((x - L*0.4) * pi/L) .* cos(y * pi/4/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower.Diameter(1));
    if ~isempty(base)
        z = z * 5/min(base(:));
    end
    z = z - 5;
    surf(x,y,z, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    colormap([...
        interp1(0:1, [handles.Color.Sand(1); handles.Color.Green(1)], linspace(0,1,32))', ...
        interp1(0:1, [handles.Color.Sand(2); handles.Color.Green(2)], linspace(0,1,32))', ...
        interp1(0:1, [handles.Color.Sand(3); handles.Color.Green(3)], linspace(0,1,32))'])
    caxis([-0.5 2])
    
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z(1,:))], ...
        'g', 'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z(:,1))], ...
        'g', 'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z(end,:))], ...
        'g', 'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z(:,end))], ...
        'g', 'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower.Height, Tower.Diameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 7 % Offshore
    
    % Landscape size
    L = max(60, Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Sea surface
    depth = -20;
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [depth depth depth depth 0 0 0 0] + 0.01];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Sea, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Seabed
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-2 depth-2 depth-2 depth-2 depth depth depth depth]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-5 depth-5 depth-5 depth-5 depth-2 depth-2 depth-2 depth-2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Monopile
    if undock
        N = 50;
    else
        N = 12;
    end
    height = 10;
    radius = max(Tower.Diameter(Tower.Height <= height))/2 + 0.1;
    [x,y,z] = cylinder(radius,N);
    z = depth + z*(height-depth);
    surf(x,y,z, ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(radius + [0,1.5,1.5],N);
    z = height + z*2;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    [x,y,z] = cylinder(Tower.Diameter(1)/2 + [1,1,0],N);
    z = 2*z + depth;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([depth-5,  Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 8 % Far offshore
    
    % Landscape size
    L = max(60, 4.5 * Tower.Diameter(1) + 5);
    W = max(L, Blade.Radius(end) + 1);
    
    % Sea surface
    depth = -40;
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [depth depth depth depth 0 0 0 0] + 0.01];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Sea, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Seabed
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-2 depth-2 depth-2 depth-2 depth depth depth depth]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Sand, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-5 depth-5 depth-5 depth-5 depth-2 depth-2 depth-2 depth-2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Brown, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Jacket
    if undock
        N = 16 + 1;
    else
        N = 6 + 1;
    end
    height = 15;
    radius = max(Tower.Diameter(Tower.Height <= height))/2;
    n = interp1([0, 1], 5 + [2.5 0.5]*radius, [0, 0.3077, 0.5769, 0.8077, 1]);
    z = [0, 0.3077, 0.5769, 0.8077, 1]*((height-7) - (depth+2)) + (depth + 2);
    Jacket_Nodes = [...
        [-1,-1, 1, 1]*n(1), ...
        [-1,-1, 1, 1]*n(2), ...
        [-1,-1, 1, 1]*n(3), ...
        [-1,-1, 1, 1]*n(4), ...
        [-1,-1, 1, 1]*n(5), 0,; ...
        [-1, 1,-1, 1]*n(1), ...
        [-1, 1,-1, 1]*n(2), ...
        [-1, 1,-1, 1]*n(3), ...
        [-1, 1,-1, 1]*n(4), ...
        [-1, 1,-1, 1]*n(5), 0,; ...
        [ 1, 1, 1, 1]*z(1), ...
        [ 1, 1, 1, 1]*z(2), ...
        [ 1, 1, 1, 1]*z(3), ...
        [ 1, 1, 1, 1]*z(4), ...
        [ 1, 1, 1, 1]*z(5), 15];
	Jacket_Members = [...
        [ 1, 2]; [ 2, 4]; [ 4, 3]; [ 3, 1]; ...
        [ 1,17]; [ 2,18]; [ 3,19]; [ 4,20]; ...
        [ 1, 6]; [ 2, 5]; [ 2, 8]; [ 4, 6]; [ 3, 8]; [ 4, 7]; [ 3, 5]; [ 1, 7]; ...
        [ 5,10]; [ 6, 9]; [ 6,12]; [ 8,10]; [ 7,12]; [ 8,11]; [ 7, 9]; [ 5,11]; ...
        [ 9,14]; [10,13]; [10,16]; [12,14]; [11,16]; [12,15]; [11,13]; [ 9,15]; ...
        [13,18]; [14,17]; [14,20]; [16,18]; [15,20]; [16,19]; [15,17]; [13,19]; ...
        [17,20]; [18,19]; [17,21]; [18,21]; [19,21]; [20,21]];
	Jacket_Diameter = ones(size(Jacket_Members));
    Jacket_Diameter(5:8,:) = 1.5;
    Jacket_Diameter(43:46,1) = 1.5;
    for i = 1:size(Jacket_Members,1)
        n1 = Jacket_Members(i,1);
        n2 = Jacket_Members(i,2);
        r1 = Jacket_Nodes(:,n1);
        r2 = Jacket_Nodes(:,n2);
        azi = repmat(linspace(0,2*pi,N),[2,1]);
        R = repmat(Jacket_Diameter(i,:)'/2,[1,N]);
        t = [zeros(1,N); ones(1,N)];
        n = (r2-r1)/norm(r2-r1);
        v = rand(3,1);
        e2 = n - v/dot(v,n);
        e2 = e2/norm(e2);
        e3 = cross(n,e2);
        e3 = e3/norm(e3);
        x = r1(1) + (r2(1)-r1(1))*t + R.*cos(azi)*e2(1) + R.*sin(azi)*e3(1); 
        y = r1(2) + (r2(2)-r1(2))*t + R.*cos(azi)*e2(2) + R.*sin(azi)*e3(2); 
        z = r1(3) + (r2(3)-r1(3))*t + R.*cos(azi)*e2(3) + R.*sin(azi)*e3(3);
        surf(x,y,z, ...
            'FaceColor', handles.Color.Yellow, ...
            'EdgeColor', handles.Color.EdgeColor, ...
            'AmbientStrength', handles.Lighting.Steel(1), ...
            'DiffuseStrength', handles.Lighting.Steel(2), ...
            'SpecularStrength', handles.Lighting.Steel(3), ...
            'BackFaceLighting', 'reverselit')
    end
    if undock
        N = 12;
    else
        N = 4;
    end
    
    % Platform
    vert = [[-1 1 1 -1 -1 1 1 -1] * (Jacket_Nodes(1,20) + 1); ...
            [-1 -1 1 1 -1 -1 1 1] * (Jacket_Nodes(2,20) + 1); ...
            [0 0 0 0 1 1 1 1]*2/3 + Jacket_Nodes(3,20)];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Nature(1), ...
        'DiffuseStrength', handles.Lighting.Nature(2), ...
        'SpecularStrength', handles.Lighting.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Interface
    if undock
        N = 50;
    else
        N = 12;
    end
    radius = max(Tower.Diameter(Tower.Height <= height))/2 + 0.01;
    [x,y,z] = cylinder(radius,N);
    z = height-7 + 5*z;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(radius + [0,1.5,1.5],N);
    z = height - 2 + z*2;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Steel(1), ...
        'DiffuseStrength', handles.Lighting.Steel(2), ...
        'SpecularStrength', handles.Lighting.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 16;
    else
        N = 6;
    end
    for i = 1:4
        [x,y,z] = cylinder([2,2,1],N);
        x = x + Jacket_Nodes(1,i);
        y = y + Jacket_Nodes(2,i);
        z = 2*z - 2 + Jacket_Nodes(3,i);
        surf(x,y,z, ...
            'FaceColor', handles.Color.Grey, ...
            'EdgeColor', handles.Color.EdgeColor, ...
            'AmbientStrength', handles.Lighting.Steel(1), ...
            'DiffuseStrength', handles.Lighting.Steel(2), ...
            'SpecularStrength', handles.Lighting.Steel(3), ...
            'BackFaceLighting', 'reverselit')
    end

    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([depth-5,  Tower.HubHeight + Blade.Radius(end) + 1])
    end
    
end

if ~undock
    
    % Create fixed number of tower elements (N = 21)
    N = 21;
    x = linspace(Tower.Height(1), Tower.Height(end), N);
    Tower.Diameter = interp1(Tower.Height, Tower.Diameter, x);
    Tower.Height = x;

    % Create fixed number of blade elements (N = 21)
    N = 21;
    x = linspace(Blade.Radius(1), Blade.Radius(end), N);
    Blade.Twist = interp1(Blade.Radius, Blade.Twist, x);
    Blade.Chord = interp1(Blade.Radius, Blade.Chord, x);
    Blade.PitchAxis = interp1(Blade.Radius, Blade.PitchAxis, x);
    Blade.Thickness = interp1(Blade.Radius, Blade.Thickness, x);
    Blade.NFoil = interp1(Blade.Radius, Blade.NFoil, x, 'nearest');
    Blade.Radius = x;

end

% Plot tower
if undock
    N = 50 + 1;
else
    N = 12 + 1;
end
s = Tower.Height/Tower.Height(end);
if get(handles.TowerStyle, 'Value') == 1
    paint = ones(size(s));
elseif get(handles.TowerStyle, 'Value') == 2
    paint = zeros(size(s));
    s = 0.05*round(20*s);
    paint(s >= 0.2) = 1;
    paint(s >= 0.4) = 0;
    paint(s >= 0.6) = 1;
    paint(s >= 0.8) = 0;
    paint(s >= 1.0) = 1;
elseif get(handles.TowerStyle, 'Value') == 3
    paint = zeros(size(s));
    paint(s > 0.25) = 1;
    paint(s > 0.30) = 0;
elseif get(handles.TowerStyle, 'Value') == 4
    paint = (s > 0.8);
elseif get(handles.TowerStyle, 'Value') == 5
    paint = zeros(size(s));
    paint(Tower.Height <= 30) = 1;
elseif get(handles.TowerStyle, 'Value') == 6
    paint = zeros(size(s));
    n = length(s(Tower.Height <= 40));
    paint(1:n) = linspace(1,0,n);
elseif get(handles.TowerStyle, 'Value') == 7
    paint = [ones(1,size(s,2)); zeros(1,size(s,2))];
    s = 0.05*round(20*s);
    paint(1,s >= 0.1) = 0;
    paint(1,s >= 0.2) = 1;
    paint(1,s >= 0.3) = 0;
    paint(1,s >= 0.4) = 1;
    paint(1,s >= 0.5) = 0;
    paint(1,s >= 0.6) = 1;
    paint(1,s >= 0.7) = 0;
    paint(1,s >= 0.8) = 1;
    paint(1,s >= 0.9) = 0;
    paint(1,s >= 1.0) = 1;
    paint(2,s >= 0.1) = 1;
    paint(2,s >= 0.2) = 0;
    paint(2,s >= 0.3) = 1;
    paint(2,s >= 0.4) = 0;
    paint(2,s >= 0.5) = 1;
    paint(2,s >= 0.6) = 0;
    paint(2,s >= 0.7) = 1;
    paint(2,s >= 0.8) = 0;
    paint(2,s >= 0.9) = 1;
    paint(2,s >= 1.0) = 0;
    paint = [paint; paint];
elseif get(handles.TowerStyle, 'Value') == 8
    paint = (s < 0.15);
end
if get(handles.TowerStyle, 'Value') == 7
    paint = kron(paint,ones(round(N/4),1));
    paint = paint(1:N-1,:);
    TowerColors = zeros([size(paint),3]);
    TowerColors(:,:,1) = paint*handles.TowerPaint(1) + (1-paint)*handles.Color.White(1);
    TowerColors(:,:,2) = paint*handles.TowerPaint(2) + (1-paint)*handles.Color.White(2);
    TowerColors(:,:,3) = paint*handles.TowerPaint(3) + (1-paint)*handles.Color.White(3);
    TowerColors = permute(TowerColors,[2,1,3]);
else
    TowerColors = kron(paint(:),handles.TowerPaint) + kron((1-paint(:)),handles.Color.White);
    TowerColors = repmat(TowerColors,[1,1,N]);
    TowerColors = permute(TowerColors,[1,3,2]);
end

if get(handles.Landscape,'Value') == 8
    Tower.Height(Tower.Height <= height) = height - 5;
end
r = repmat(Tower.Diameter(:)/2,[1,N]);
azi = repmat(linspace(0,2*pi,N),[length(Tower.Diameter),1]);
x = r.*cos(azi);
y = r.*sin(azi);
z = repmat(Tower.Height(:),[1,N]);
x = [x; x(end,:)];
y = [y; y(end,:)];
z = [z; 0*z(end,:) + Tower.HubHeight];
TowerColors = [TowerColors; TowerColors(end,:,:)];
TowerColors = [TowerColors, TowerColors(:,end,:)];
surf(x,y,z, ...
    'CData', TowerColors, ...
    'FaceColor', 'texturemap', ...
    'EdgeColor', handles.Color.EdgeColor, ...
    'AmbientStrength', handles.Lighting.Glassfiber(1), ...
    'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
    'SpecularStrength', handles.Lighting.Glassfiber(3), ...
    'BackFaceLighting', 'reverselit')

% Plot nacelle
if undock
    N = 50 + 1;
else
    N = 20 + 1;
end
t = Nacelle.Hub.ShaftTilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
if Nacelle.Housing.Type== 1
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Tower.HubHeight + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightergrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif Nacelle.Housing.Type== 2
    
    Nx = 12;
    R = Nacelle.Housing.Diameter/2;
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(cos(linspace(0,pi/2,Nx)),[N,1]) * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    y = r.*cos(azi);
    z = r.*sin(azi);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),N,Nx);
    y = reshape(A(2,:),N,Nx);
    z = reshape(A(3,:),N,Nx) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1.5;
    dz = Tower.HubHeight + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightergrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')

elseif Nacelle.Housing.Type== 3
    
    [x,y,z] = cylinder([1 2/3]*Nacelle.Housing.Diameter/2,N-1);
    z = z * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Tower.HubHeight + Nacelle.Housing.Diameter/2*0.85;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightergrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif Nacelle.Housing.Type== 4
    
    [x,y,z] = cylinder([1 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    dx = max(z(:));
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 1]*Tower.Diameter(end)/2,N-1);
    z = dx - z * dx;
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = sphere(N-1);
    x = x * Tower.Diameter(end)/2;
    y = y * Tower.Diameter(end)/2;
    z = z * Tower.Diameter(end)/2 + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 0.9 0.9 1]*min(Blade.Chord(1), Tower.Diameter(end)/2),N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif Nacelle.Housing.Type== 5
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Tower.HubHeight + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightergrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    x = [0, 0, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 2, 2] + 0.5*Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = [1, 1, 1, -1, -1, -1; 1, 1, 1, -1, -1, -1] * Nacelle.Housing.Diameter/2;
    z = [0.1, 0.1, 1, 1, 0.1, 0.1; 0.1, 0.1, 1, 1, 0.1, 0.1] * Nacelle.Housing.Diameter * 3/4;
    y(:,2:3) = y(:,2:3) + 0.25;
    y(:,4:5) = y(:,4:5) - 0.25;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(y));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [0, 0, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 2, 2] + 0.5*Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = [1, 1, 1, -1, -1, -1; 1, 1, 1, -1, -1, -1] * Nacelle.Housing.Diameter/2 + 0.05*[0, -1, -1, 1, 1, 0; 0, -1, -1, 1, 1, 0];
    z = [0.1, 0.1, 1, 1, 0.1, 0.1; 0.1, 0.1, 1, 1, 0.1, 0.1] * Nacelle.Housing.Diameter * 3/4 + 0.05*[0, 0, -1, -1, 0, 0; 0, 0, -1, -1, 0, 0];
    y(:,2:3) = y(:,2:3) + 0.25;
    y(:,4:5) = y(:,4:5) - 0.25;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(y));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif Nacelle.Housing.Type== 6
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Tower.HubHeight + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Lightergrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + (Nacelle.Housing.Length-1.5);
    dz = 0.5 + Tower.HubHeight + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 2 + dx*cos(t); ...
            [-1 -1 1 1 -1 -1 1 1] * 3/2; ...
            [-1 -1 -1 -1 0 0 0 0] * 0.25 + dz - dx*sin(t)];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = repmat([-1, 1, 1, -1, -1] * 2 + dx*cos(t), [2,1]);
    y = repmat([1, 1, -1, -1, 1] * 3/2, [2,1]);
    z = [zeros(1,5); ones(1,5)] * 0.25 + dz - dx*sin(t);
    surf(x,y,z, ...
        'FaceColor', handles.Color.Lightgrey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(0.1,4);
    x = x + dx*cos(t);
    z = -z - 0.25 + dz  - dx*sin(t);
    for i = [-1, 1]
        for j = [-1, 1]
            surf(x+i,y+j,z, ...
                'FaceColor', handles.Color.Grey, ...
                'EdgeColor', handles.Color.EdgeColor, ...
                'AmbientStrength', handles.Lighting.Glassfiber(1), ...
                'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
                'SpecularStrength', handles.Lighting.Glassfiber(3), ...
                'BackFaceLighting', 'reverselit')
        end
    end
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif Nacelle.Housing.Type== 7

    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Tower.HubHeight;
    z(2,[1,4,17]) = Tower.HubHeight + 0.9*Nacelle.Housing.Diameter/2;
    z(2,2:3) = Tower.HubHeight + Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [-1-sqrt(2), -1, 1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2)] + 1+sqrt(2);
    y = [1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2), -1, 1];
    x = repmat(x,[2,1])*2.5 - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1;
    y = repmat(y,[2,1])*2.5;
    z = [zeros(1,9); ones(1,9)]*0.5 + Tower.HubHeight + Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1 + (1+sqrt(2))*2.5;
    x = ([0, 0, 0, 0; 1, 1, 1, 1] - 0.5) * 0.5 + dx;
    y = [0, 1, 0, 0; 0, 1, 0, 0];
    z = [-1, 0, 0, -1; -1, 0, 0, -1] + Tower.HubHeight + Nacelle.Housing.Diameter/2;
    if Nacelle.Housing.Diameter < 10
        for i = [-1 1]
            for j = [-1 1]
                surf(x + 1.5*i,y*j + Nacelle.Housing.Diameter/2*j,z, ...
                    'FaceColor', handles.Color.Lightgrey, ...
                    'EdgeColor', handles.Color.EdgeColor, ...
                    'AmbientStrength', handles.Lighting.Steel(1), ...
                    'DiffuseStrength', handles.Lighting.Steel(2), ...
                    'SpecularStrength', handles.Lighting.Steel(3), ...
                    'BackFaceLighting', 'reverselit')
            end
        end
    end
    h = 0.75;
    q = linspace(0,2*pi,25);
    x = [(5+2/3*h)*cos(q); 5*cos(q)];
    y = [(5+2/3*h)*sin(q); 5*sin(q)];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Tower.HubHeight + Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [1, 1, 0, 0, 1, 1, -1, -1, 0, 0, -1, -1, 1]*2 + [0, 0, h/2, h/2, 0, 0, 0, 0, -h/2, -h/2, 0, 0, 0];
    y = [-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1]*2 + [0, h, h, -h, -h, 0, 0, -h, -h, h, h, 0, 0];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Tower.HubHeight + Nacelle.Housing.Diameter/2;
    patch(x,y,z, 'g', ...
        'FaceColor', handles.Color.Yellow, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.Grey, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
end
    
% Plot nose cone
if Nacelle.Housing.Type== 4
    R = min(Blade.Chord(1)*3/4, Tower.Diameter(end)/2);
else
    R = Nacelle.Housing.Diameter/2;
end
if Nacelle.Hub.Type == 1
    
    if undock
        Nx = 50 + 1;
    else
        Nx = 10 + 1;
    end
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = 0.5*Blade.Chord(1) - repmat(cos(linspace(0,pi/2,Nx)),[N,1])*Nacelle.Hub.Length - Nacelle.Hub.Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);

elseif Nacelle.Hub.Type == 2
    
    Nx = 4;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x * 0.9, x(:,end), x(:,end)];
    y = [y, y(:,end) * 0.9, y(:,end) * 0];
    z = [z, z(:,end) * 0.9, z(:,end) * 0];
    x = 0.5*Blade.Chord(1) - x*Nacelle.Hub.Length - Nacelle.Hub.Overhang;

elseif Nacelle.Hub.Type == 3
    
    Nx = 3;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x*0.5*Blade.Chord(1)/Nacelle.Hub.Length, x(:,end)];
    y = [y, y(:,end) * 0];
    z = [z, z(:,end) * 0];
    x = 0.5*Blade.Chord(1) - x*Nacelle.Hub.Length - Nacelle.Hub.Overhang;

elseif Nacelle.Hub.Type == 4
    
    if undock
        Nx = 50 + 1;
    else
        Nx = 10 + 1;
    end
    rho = (R^2 + Nacelle.Hub.Length^2)/(2*R);
    x = linspace(0,Nacelle.Hub.Length,Nx);
    r = repmat(sqrt(rho^2 - (Nacelle.Hub.Length-x).^2) + R - rho,[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(x-Nacelle.Hub.Length,[N,1]) + 0.5*Blade.Chord(1) - Nacelle.Hub.Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);
    
end
A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
A = Ry * A;
x = reshape(A(1,:),N,Nx);
y = reshape(A(2,:),N,Nx);
z = reshape(A(3,:),N,Nx) + Tower.HubHeight;
surf(x,y,z, ...
    'FaceColor', handles.Color.Lightergrey, ...
    'EdgeColor', handles.Color.EdgeColor, ...
    'AmbientStrength', handles.Lighting.Glassfiber(1), ...
    'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
    'SpecularStrength', handles.Lighting.Glassfiber(3), ...
    'BackFaceLighting', 'reverselit')

% Blade cross-section
if undock
    N = 10;
else
    N = 40;
end
x = [];
y = [];
for i = 1:length(Blade.NFoil)
    x = [x; ([handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(1,1:N:end), handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(1,1)] - Blade.PitchAxis(i)) * Blade.Chord(i)];
end
for i = 1:length(Blade.NFoil)
    t_u = max(handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(2,1:200));
    t_l = min(handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(2,200:end));
    t(i) = t_u - t_l;
end
for i = 1:length(Blade.NFoil)
    y = [y; -1*[handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(2,1:N:end), handles.Airfoil.Geometry{Blade.IFoil(Blade.NFoil(i))}(2,1)] * Blade.Thickness(i)/t(i)];
end
z = repmat(Blade.Radius(:),[1,size(x,2)]);

% Plot blade
for i = 1:length(Blade.NFoil)
    t = pi/2 - (Blade.Twist(i) + Control.Pitch.Fine) * pi/180;
    Rz = [cos(t),-sin(t), 0; ...
          sin(t), cos(t), 0; ...
          0,      0,      1];
    A = Rz * [x(i,:); y(i,:); z(i,:)];
    x(i,:) = A(1,:);
    y(i,:) = A(2,:);
    z(i,:) = A(3,:);
end
x = [x(1,:); x; 0.5*x(end,:)];
y = [y(1,:); y; 0*y(end,:)];
z = [0*z(1,:); z; 0.01 + z(end,:)];
o = 2*pi/Blade.Number;
t = Nacelle.Hub.ShaftTilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
c = -Blade.Cone*pi/180;
Rc = [cos(c), 0, sin(c); ...
      0,      1, 0; ...
     -sin(c), 0, cos(c)];
N = size(x);

s = Blade.Radius/Blade.Radius(end);
if get(handles.BladeStyle, 'Value') == 1
    paint = ones(size(s));
elseif get(handles.BladeStyle, 'Value') == 2
    paint = zeros(size(s));
    paint(s > 0.25) = 1;
    paint(s > 0.50) = 0;
    paint(s > 0.75) = 1;
elseif get(handles.BladeStyle, 'Value') == 3
    paint = zeros(size(s));
    paint(s > 0.125) = 1;
    paint(s > 0.250) = 0;
    paint(s > 0.375) = 1;
    paint(s > 0.500) = 0;
    paint(s > 0.625) = 1;
    paint(s > 0.750) = 0;
    paint(s > 0.875) = 1;
elseif get(handles.BladeStyle, 'Value') == 4
    paint = (s > 0.8);
elseif get(handles.BladeStyle, 'Value') == 5
    paint = zeros(size(s));
    paint(s > 0.650) = 1;
    paint(s > 0.750) = 0;
    paint(s > 0.875) = 1;
elseif get(handles.BladeStyle, 'Value') == 6
    paint = zeros(size(s));
    paint(s > 0.70) = 1;
    paint(s > 0.75) = 0;
    paint(s > 0.80) = 1;
elseif get(handles.BladeStyle, 'Value') == 7
    paint = zeros(2,size(s,2));
    paint(1,s > 0.75) = 0;
    paint(1,s > 0.80) = 1;
    paint(1,s > 0.85) = 0;
    paint(1,s > 0.90) = 1;
    paint(2,s > 0.75) = 1;
    paint(2,s > 0.80) = 0;
    paint(2,s > 0.85) = 1;
    paint(2,s > 0.90) = 0;
    paint = [paint; paint];
elseif get(handles.BladeStyle, 'Value') == 8
    paint = (s < 0.15);
end
if get(handles.BladeStyle, 'Value') == 7
    paint = kron(paint,ones(round((N(2)+1)/4),1));
    paint = paint(1:N(2),:);
    BladeColors = zeros([size(paint),3]);
    BladeColors(:,:,1) = paint*handles.BladePaint(1) + (1-paint)*handles.Color.White(1);
    BladeColors(:,:,2) = paint*handles.BladePaint(2) + (1-paint)*handles.Color.White(2);
    BladeColors(:,:,3) = paint*handles.BladePaint(3) + (1-paint)*handles.Color.White(3);
    BladeColors = permute(BladeColors,[2,1,3]);
else
    BladeColors = kron(paint(:),handles.BladePaint) + kron((1-paint(:)),handles.Color.White);
    BladeColors = repmat(BladeColors,[1,1,N(2)]);
    BladeColors = permute(BladeColors,[1,3,2]);
end

if Blade.Number == 1
    do = pi/2;
else
    do = pi - pi/Blade.Number;
end

for B = 1:Blade.Number
    Rx = [1, 0,      0; ...
          0, cos(B*o + do),-sin(B*o + do); ...
          0, sin(B*o + do), cos(B*o + do)];
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    xB = reshape(A(1,:),N);
    yB = reshape(A(2,:),N);
    zB = reshape(A(3,:),N) + Tower.HubHeight;
    surf(xB,yB,zB, ...
        'CData', BladeColors, ...
        'FaceColor', 'texturemap', ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit');
end

if Blade.Number == 1
    
    [x,y,z] = cylinder(Blade.Chord(1)/2*[2/3 1/3], N(2)-1);
    N = size(x);
    z = -1*z*Blade.Radius(end)/4;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.Color.White, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = sphere(N(2)-1);
    x = x * Blade.Chord(1)/4;
    y = y * Blade.Chord(1)/2;
    z = z * Blade.Chord(1)/4 - Blade.Radius(end)/4;
    N = size(x);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N) + Tower.HubHeight;
    surf(x,y,z, ...
        'FaceColor', handles.BladePaint, ...
        'EdgeColor', handles.Color.EdgeColor, ...
        'AmbientStrength', handles.Lighting.Glassfiber(1), ...
        'DiffuseStrength', handles.Lighting.Glassfiber(2), ...
        'SpecularStrength', handles.Lighting.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
end

%% Undock plot
function Undock_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Undock
PlotTurbine(handles,true)

%% Blade paint style
function BladeStyle_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BladeStyle_Callback(hObject, eventdata, handles)
cla(handles.TurbinePlot)
PlotTurbine(handles,false)
function BladeColor_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BladeColor_Callback(hObject, eventdata, handles)

% Set blade colors
handles.BladePaint = handles.ColorArray(get(handles.BladeColor, 'Value'),:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Tower paint style
function TowerStyle_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function TowerStyle_Callback(hObject, eventdata, handles)
cla(handles.TurbinePlot)
PlotTurbine(handles,false)
function TowerColor_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function TowerColor_Callback(hObject, eventdata, handles)

% Set tower colors
handles.TowerPaint = handles.ColorArray(get(handles.TowerColor, 'Value'),:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Rotation speed text box
function RotationSpeed_textbox_Callback(hObject, eventdata, handles)
if isnan(str2double(get(hObject, 'String')))
    set(hObject, 'String', num2str(handles.Animation.RotationSpeed));
else
    handles.Animation.RotationSpeed = str2double(get(hObject, 'String'));
end
guidata(hObject, handles); 
function RotationSpeed_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Air density text box
function AirDensity_textbox_Callback(hObject, eventdata, handles)
if isnan(str2double(get(hObject, 'String')))
    set(hObject, 'String', num2str(handles.AirDensity));
else
    handles.AirDensity = str2double(get(hObject, 'String'));
end
guidata(hObject, handles);
function AirDensity_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Wind streaks - check box
function Streaks_Callback(hObject, eventdata, handles)

% Stop animation
restart = false;
if get(handles.Animate, 'Value')
    restart = true;
    set(handles.Animate, 'Value', 0);
end

% Show or hide streaks
if get(hObject, 'Value')
	Parts = get(handles.TurbinePlot, 'Children');
    for i = length(Parts)-2:-1:length(Parts)-11
        streak = Parts(i);
        set(streak,'Visible','on');
    end
else
    Parts = get(handles.TurbinePlot, 'Children');
    for i = length(Parts)-2:-1:length(Parts)-11
        streak = Parts(i);
        set(streak,'Visible','off');
    end
end

% Restart animation
if restart
    set(handles.Animate, 'Value', 1);
end

%% Animate button
function Animate_Callback(hObject, eventdata, handles)

% Animation framerate
fps = 30;
closing = false;

% Get geometry from handles
Blade = handles.Blade;
Tower = handles.Tower;
Nacelle = handles.Nacelle;

% Rotating parts
if Blade.Number == 1
    NParts = 3 + 1;
else
    NParts = Blade.Number + 1;
end

% Rotation matrices
t = Nacelle.Hub.ShaftTilt*pi/180;
o = handles.Animation.RotationSpeed/fps * 2*pi/60;
R = ...
    [cos(t),  0,       sin(t); ...
     0,       1,       0; ...
    -sin(t),  0,       cos(t)] * ...
    [1,       0,       0; ...
     0,       cos(o), -sin(o); ...
     0,       sin(o),  cos(o)] * ...
    [cos(-t), 0,       sin(-t); ...
     0,       1,       0; ...
    -sin(-t), 0,       cos(-t)];

% Change button text
if get(hObject,'Value')
    set(hObject, 'String', 'Stop')
else
    set(hObject, 'String', 'Animate')
    Parts = get(handles.TurbinePlot, 'Children');
    for i = length(Parts)-2:-1:length(Parts)-11
        streak = Parts(i);
        set(streak,'Visible','off');
    end
end

% Draw frames
frametime = tic;
while get(hObject,'Value')

    camera = get(handles.TurbinePlot, 'CameraPosition');
    
    % Small delay to match animation refresh rate to rotor speed
    while toc(frametime) < 1/fps 
    end
    frametime = tic;

    % Rotate blades
    drawtime = tic;
    Parts = get(handles.TurbinePlot, 'Children');
    for i = 1:NParts
        Part = Parts(i);
        N = size(get(Part,'XData'));
        A = [...
            reshape(get(Part,'XData'),1,[]); ...
            reshape(get(Part,'YData'),1,[]); ...
            reshape(get(Part,'ZData'),1,[]) - Tower.HubHeight];
        A = R*A;
        set(Part,...
            'XData', reshape(A(1,:),N), ...
            'YData', reshape(A(2,:),N), ...
            'ZData', reshape(A(3,:),N) + Tower.HubHeight);
    end
    
    % Animate wind streaks
    if get(handles.Streaks, 'Value')
        for i = length(Parts)-2:-1:length(Parts)-11
            streak = Parts(i);
            x = get(streak,'XData');
            y = get(streak,'YData');
            z = get(streak,'ZData');
            s = 0.16*(0.75*10.*(z(end)/Tower.HubHeight).^0.25 + 5.6);
            x = [x(2:end), x(end)+1.0*s*randn(1)+0.25*10*(z(end)/Tower.HubHeight)^0.25];
            y = [y(2:end), y(end)+0.8*s*randn(1)];
            z = [z(2:end), z(end)+0.5*s*randn(1)];
            if x(end) > 50 || z(end) < 0
                x = 0*x + (-2:0.5:2) .* 10.*(z/Tower.HubHeight).^0.25 - 50;
                y = 0*y + (rand(1)-0.5)*2*Blade.Radius(end);
                z = 0*z + (Tower.HubHeight + Blade.Radius(end))*rand(1);
            end
            set(streak,...
                'XData', real(x), ...
                'YData', real(y), ...
                'ZData', real(z), ...
                'Visible', 'on');
        end
    end

    drawnow
    
    if strcmp(get(hObject, 'String'), 'Closing...')
        closing = true;
        break
    end
    
    % Adjust refresh rate if needed
    if toc(drawtime) > 1/fps
        if isequal(camera, get(handles.TurbinePlot, 'CameraPosition'))
            if fps > 1
                fps = fps - 5;
                o = handles.Animation.RotationSpeed/fps * 2*pi/60;
                R = ...
                    [cos(t),  0,       sin(t); ...
                     0,       1,       0; ...
                    -sin(t),  0,       cos(t)] * ...
                    [1,       0,       0; ...
                     0,       cos(o), -sin(o); ...
                     0,       sin(o),  cos(o)] * ...
                    [cos(-t), 0,       sin(-t); ...
                     0,       1,       0; ...
                    -sin(-t), 0,       cos(-t)];
            end
        end
    elseif toc(drawtime) < 1/30
        if isequal(camera, get(handles.TurbinePlot, 'CameraPosition'))
            if fps < 30
                fps = fps + 5;
                o = handles.Animation.RotationSpeed/fps * 2*pi/60;
                R = ...
                    [cos(t),  0,       sin(t); ...
                     0,       1,       0; ...
                    -sin(t),  0,       cos(t)] * ...
                    [1,       0,       0; ...
                     0,       cos(o), -sin(o); ...
                     0,       sin(o),  cos(o)] * ...
                    [cos(-t), 0,       sin(-t); ...
                     0,       1,       0; ...
                    -sin(-t), 0,       cos(-t)];
            end
        end
    end

end

if closing
    close all force
end

%% Landscape dropdown menu
function Landscape_Callback(hObject, eventdata, handles)

% Stop animation
animating = false;
if get(handles.Animate, 'Value')
    animating = true;
    set(handles.Animate, 'Value', 0);
end

% Random number seed
rng('shuffle');
RNG = rng;
handles.Seed = RNG.Seed;
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

% Resume animation
if animating
    set(handles.Animate, 'Value', 1);
end
function Landscape_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Blade design submenu
function BladeDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NParts = 1:BladeParts;
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Blades submenu
handles.Blade = BladeDesign(...
    handles.Blade, ...
    handles.Airfoil, ...
    get(handles.BladeStyle, 'Value'), ...
    handles.ColorArray(get(handles.BladeColor, 'Value'),:));

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Airfoil design submenu
function AirfoilDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NParts = 1:BladeParts;
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Blades submenu
[handles.Airfoil, handles.Blade] = AirfoilDesign(...
    handles.Airfoil, ...
    handles.Blade);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Tower design submenu
function TowerDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle.Housing.Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
NParts = BladeParts + NacelleParts(handles.Nacelle.Housing.Type);
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Tower submenu
handles.Tower = TowerDesign(...
    handles.Tower, ...
    get(handles.TowerStyle, 'Value'), ...
    handles.ColorArray(get(handles.TowerColor, 'Value'),:));

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Nacelle design submenu
function NacelleDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle.Housing.Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
NParts = (BladeParts + 1):(BladeParts - 1 + NacelleParts(handles.Nacelle.Housing.Type));
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Nacelle submenu
handles.Nacelle = NacelleDesign(...
    handles.Nacelle, ...
    handles.Tower, ...
    handles.Blade);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Control design submenu
function ControlDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle.Housing.Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
DrivetrainParts = [3, 2, 2, 3, 3, 9, 10];
NParts = (BladeParts + 2 + DrivetrainParts(handles.Nacelle.Housing.Type)):(BladeParts - 1 + NacelleParts(handles.Nacelle.Housing.Type));
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Control submenu
handles.Control = ControlDesign(...
    handles.Control);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Drive train design submenu
function DrivetrainDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.Blade.Number == 1
    BladeParts = 3;
else
    BladeParts = handles.Blade.Number;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle.Housing.Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
DrivetrainParts = [3, 2, 2, 3, 3, 9, 10];
NParts = (BladeParts + 2 + DrivetrainParts(handles.Nacelle.Housing.Type)):(BladeParts - 1 + NacelleParts(handles.Nacelle.Housing.Type));
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Color.Blue);
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Drivetrain submenu
handles.Drivetrain = DrivetrainDesign(...
    handles.Drivetrain);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Plot steady operating curves
function GenerateSteadyOp_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Steady operation submenu
GenerateSteadyOp(...
    handles.Blade, ...
    handles.Airfoil, ...
    handles.Drivetrain, ...
    handles.Control);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

%% Modal analysis submenu
function ModalAnalysis_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Modal analysis submenu
ModalAnalysis(...
    handles.Blade, ...
    handles.Airfoil, ...
    handles.Tower, ...
    handles.Nacelle, ...
    handles.Drivetrain, ...
    handles.Control);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Linearization submenu
function Linearization_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Linearization submenu
Linearization(...
    handles.Blade, ...
    handles.Airfoil, ...
    handles.Tower, ...
    handles.Nacelle, ...
    handles.Control, ...
    handles.Drivetrain);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

%% Certification submenu
function Certification_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Disable window
buttons = findall(handles.WindTurbineDesign, 'Type', 'UIControl');
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'off');
end

% Certification submenu
handles.CertificationSettings = Certification(...
    handles.Blade, ...
    handles.Airfoil, ...
    handles.Tower, ...
    handles.Nacelle, ...
    handles.Drivetrain, ...
    handles.Control, ...
    handles.CertificationSettings);

% Enable window
for i = 1:length(buttons)
    set(buttons(i), 'Enable', 'on');
end

% Update handles structure
guidata(hObject, handles);

